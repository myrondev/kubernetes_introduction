apiVersion: v1
kind: Service
metadata:
  name: nginx-app
  labels:
    app: nginx-app
spec:
  ports:
    - port: 80
      name: webapp
  selector:
    app: nginx-app
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: webapp
spec:
  serviceName: "nginx"
  replicas: 3
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx
        image: k8s.gcr.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: webapp
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
#Persistent Volumes and Persistent Volume Claims use Storage Classes.

#pod's name  webapp-0

#A volumeMount, on the other hand, entails mounting of the declared volume into a container in the same Pod.


# Looks a lot like Deployment but uses volumeClaimTemplate to claim a volume for each pod.


# persistentvolume is created
# persistentvolumeclaim is created

# StatefulSets currently require a Headless Service to be responsible for the network identity of the Pods. You are responsible for creating this Service.

# StatefulSets donâ€™t create ReplicaSet or anything of that sort, so you cant rollback a StatefulSet to a previous version. Y
# You can only delete or scale up/down the Statefulset.